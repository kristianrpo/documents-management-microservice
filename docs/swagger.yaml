basePath: /
definitions:
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.HealthCheckResponse:
    properties:
      ok:
        example: true
        type: boolean
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListData:
    properties:
      documents:
        items:
          $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.DocumentResponse'
        type: array
      pagination:
        $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.Pagination'
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListErrorResponse:
    properties:
      error:
        $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.ErrorDetail'
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListResponse:
    properties:
      data:
        $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListData'
      success:
        example: true
        type: boolean
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.UploadErrorResponse:
    properties:
      error:
        $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.ErrorDetail'
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.UploadResponse:
    properties:
      data:
        $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.DocumentResponse'
      success:
        example: true
        type: boolean
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.DocumentResponse:
    properties:
      filename:
        example: my-document.pdf
        type: string
      hash_sha256:
        example: abc123def456789...
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      mime_type:
        example: application/pdf
        type: string
      owner_email:
        example: user@example.com
        type: string
      size_bytes:
        example: 102400
        type: integer
      url:
        example: https://my-bucket.s3.amazonaws.com/ab/abc123def456.pdf
        type: string
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.ErrorDetail:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      message:
        example: invalid request format or validation failed
        type: string
    type: object
  github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.Pagination:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total_items:
        example: 42
        type: integer
      total_pages:
        example: 5
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: |-
    Microservice for managing document uploads, storage, and metadata

    Features:
    - Upload documents to S3
    - Store metadata in DynamoDB
    - Automatic file deduplication based on SHA256 hash
    - Support for multiple file types
    - Health check endpoint
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Document Management Microservice API
  version: "1.0"
paths:
  /api/v1/documents:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a paginated list of documents for a specific owner (identified by email).

        ## Features
        - Returns documents sorted by creation date (most recent first)
        - Supports pagination with configurable page size
        - Includes pagination metadata (total items, total pages, current page)
        - Maximum limit per page: 100 documents
        - Default page size: 10 documents

        ## Pagination
        - Use `page` parameter to navigate through results (starts at 1)
        - Use `limit` parameter to control page size (1-100)
        - Response includes total count and total pages for UI rendering

        ## Error Codes
        - `VALIDATION_ERROR`: Invalid email format or pagination parameters
        - `PERSISTENCE_ERROR`: Failed to retrieve documents from database
      parameters:
      - description: Owner's email address
        example: user@example.com
        format: email
        in: query
        name: email
        required: true
        type: string
      - default: 1
        description: Page number (starts at 1)
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page (max 100)
        example: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of documents retrieved successfully
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListResponse'
        "400":
          description: Validation error - invalid email or pagination parameters
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListErrorResponse'
        "500":
          description: Internal server error - database error
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.ListErrorResponse'
      summary: List documents
      tags:
      - documents
    post:
      consumes:
      - multipart/form-data
      description: |-
        Uploads a document to S3 storage and saves its metadata in DynamoDB.

        ## Features
        - Automatic file deduplication based on SHA256 hash
        - If a file with the same hash exists for the same user, returns the existing document
        - Supports any file type
        - Automatically detects MIME type from file extension
        - Generates unique object keys using hash prefix for optimal S3 performance

        ## Process
        1. Calculates SHA256 hash of the uploaded file
        2. Checks if document already exists (hash + email)
        3. If exists, returns existing document (no duplicate upload)
        4. If new, uploads to S3 and saves metadata to DynamoDB

        ## Error Codes
        - `VALIDATION_ERROR`: Invalid request format or missing required fields
        - `FILE_READ_ERROR`: Failed to read the uploaded file
        - `HASH_CALCULATE_ERROR`: Failed to calculate file hash
        - `STORAGE_UPLOAD_ERROR`: Failed to upload file to S3
        - `PERSISTENCE_ERROR`: Failed to save metadata to DynamoDB
      parameters:
      - description: 'File to upload (supports any file type: PDF, images, documents,
          etc.)'
        in: formData
        name: file
        required: true
        type: file
      - description: Owner's email address
        example: user@example.com
        format: email
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Document uploaded successfully
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.UploadResponse'
        "400":
          description: Validation error - invalid email format or missing required
            fields
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.UploadErrorResponse'
        "500":
          description: Internal server error - file processing, storage upload, or
            database error
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.UploadErrorResponse'
      summary: Upload a document
      tags:
      - documents
  /healthz:
    get:
      description: |-
        Returns the health status of the service. Use this endpoint to verify that the API is running and responsive.
        This endpoint is useful for:
        - Load balancer health checks
        - Monitoring and alerting systems
        - Kubernetes liveness/readiness probes
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy and operational
          schema:
            $ref: '#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.HealthCheckResponse'
      summary: Health check endpoint
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
tags:
- description: Document upload and management operations
  name: documents
- description: Health check endpoints
  name: health
