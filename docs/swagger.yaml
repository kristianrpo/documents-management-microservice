basePath: /
definitions:
  endpoints.DeleteAllData:
    properties:
      deleted_count:
        example: 5
        type: integer
    type: object
  endpoints.DeleteAllErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
    type: object
  endpoints.DeleteAllResponse:
    properties:
      data:
        $ref: '#/definitions/endpoints.DeleteAllData'
      message:
        example: all documents deleted successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  endpoints.DeleteErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
    type: object
  endpoints.DeleteResponse:
    properties:
      message:
        example: document deleted successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  endpoints.GetErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
    type: object
  endpoints.GetResponse:
    properties:
      data:
        $ref: '#/definitions/shared.DocumentResponse'
      success:
        example: true
        type: boolean
    type: object
  endpoints.HealthCheckResponse:
    properties:
      ok:
        example: true
        type: boolean
    type: object
  endpoints.ListData:
    properties:
      documents:
        items:
          $ref: '#/definitions/shared.DocumentResponse'
        type: array
      pagination:
        $ref: '#/definitions/shared.Pagination'
    type: object
  endpoints.ListErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
    type: object
  endpoints.ListResponse:
    properties:
      data:
        $ref: '#/definitions/endpoints.ListData'
      success:
        example: true
        type: boolean
    type: object
  endpoints.RequestAuthenticationErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
      success:
        example: false
        type: boolean
    type: object
  endpoints.RequestAuthenticationResponse:
    properties:
      message:
        example: Authentication request submitted successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  endpoints.TransferData:
    properties:
      documents:
        items:
          $ref: '#/definitions/shared.TransferDocument'
        type: array
      expires_in:
        example: 15m
        type: string
      id_citizen:
        example: 123456789
        type: integer
      total_documents:
        example: 5
        type: integer
    type: object
  endpoints.TransferErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
      success:
        example: false
        type: boolean
    type: object
  endpoints.TransferResponse:
    properties:
      data:
        $ref: '#/definitions/endpoints.TransferData'
      message:
        example: Documents prepared for transfer
        type: string
      success:
        example: true
        type: boolean
    type: object
  endpoints.UploadErrorResponse:
    properties:
      error:
        $ref: '#/definitions/shared.ErrorDetail'
    type: object
  endpoints.UploadResponse:
    properties:
      data:
        $ref: '#/definitions/shared.DocumentResponse'
      success:
        example: true
        type: boolean
    type: object
  shared.DocumentResponse:
    properties:
      filename:
        example: my-document.pdf
        type: string
      hash_sha256:
        example: abc123def456789...
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      mime_type:
        example: application/pdf
        type: string
      owner_id:
        example: 1234567890
        type: integer
      size_bytes:
        example: 102400
        type: integer
      url:
        example: https://my-bucket.s3.amazonaws.com/ab/abc123def456.pdf
        type: string
    type: object
  shared.ErrorDetail:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      message:
        example: invalid request format or validation failed
        type: string
    type: object
  shared.Pagination:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total_items:
        example: 42
        type: integer
      total_pages:
        example: 5
        type: integer
    type: object
  shared.TransferDocument:
    properties:
      expires_at:
        example: "2025-10-14T15:30:00Z"
        type: string
      filename:
        example: passport.pdf
        type: string
      hash_sha256:
        example: a1b2c3d4e5f6...
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      mime_type:
        example: application/pdf
        type: string
      presigned_url:
        example: https://s3.amazonaws.com/bucket/key?signature=...
        type: string
      size_bytes:
        example: 1048576
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: |-
    Microservice for managing document uploads, storage, and metadata

    Features:
    - Upload documents to S3
    - Store metadata in DynamoDB
    - Automatic file deduplication based on SHA256 hash
    - Support for multiple file types
    - Health check endpoint
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Document Management Microservice API
  version: "1.0"
paths:
  /api/v1/documents:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a paginated list of documents for a specific owner (identified by citizen ID).

        ## Features
        - Returns documents sorted by creation date (most recent first)
        - Supports pagination with configurable page size
        - Includes pagination metadata (total items, total pages, current page)
        - Maximum limit per page: 100 documents
        - Default page size: 10 documents

        ## Pagination
        - Use `page` parameter to navigate through results (starts at 1)
        - Use `limit` parameter to control page size (1-100)
        - Response includes total count and total pages for UI rendering

        ## Error Codes
        - `VALIDATION_ERROR`: Invalid id_citizen or pagination parameters
        - `PERSISTENCE_ERROR`: Failed to retrieve documents from database
      parameters:
      - description: Owner's citizen ID
        example: 123456789
        in: query
        name: id_citizen
        required: true
        type: integer
      - default: 1
        description: Page number (starts at 1)
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page (max 100)
        example: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of documents retrieved successfully
          schema:
            $ref: '#/definitions/endpoints.ListResponse'
        "400":
          description: Validation error - invalid id_citizen or pagination parameters
          schema:
            $ref: '#/definitions/endpoints.ListErrorResponse'
        "500":
          description: Internal server error - database error
          schema:
            $ref: '#/definitions/endpoints.ListErrorResponse'
      summary: List documents
      tags:
      - documents
    post:
      consumes:
      - multipart/form-data
      description: |-
        Uploads a document to S3 storage and saves its metadata in DynamoDB.

        ## Features
        - Automatic file deduplication based on SHA256 hash
        - If a file with the same hash exists for the same user, returns the existing document
        - Supports any file type
        - Automatically detects MIME type from file extension
        - Generates unique object keys using hash prefix for optimal S3 performance

        ## Process
        1. Calculates SHA256 hash of the uploaded file
        2. Checks if document already exists (hash + citizen ID)
        3. If exists, returns existing document (no duplicate upload)
        4. If new, uploads to S3 and saves metadata to DynamoDB

        ## Error Codes
        - `VALIDATION_ERROR`: Invalid request format or missing required fields
        - `FILE_READ_ERROR`: Failed to read the uploaded file
        - `HASH_CALCULATE_ERROR`: Failed to calculate file hash
        - `STORAGE_UPLOAD_ERROR`: Failed to upload file to S3
        - `PERSISTENCE_ERROR`: Failed to save metadata to DynamoDB
      parameters:
      - description: 'File to upload (supports any file type: PDF, images, documents,
          etc.)'
        in: formData
        name: file
        required: true
        type: file
      - description: Owner's citizen ID
        example: 123456789
        in: formData
        name: id_citizen
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Document uploaded successfully
          schema:
            $ref: '#/definitions/endpoints.UploadResponse'
        "400":
          description: Validation error - invalid id_citizen or missing required fields
          schema:
            $ref: '#/definitions/endpoints.UploadErrorResponse'
        "500":
          description: Internal server error - file processing, storage upload, or
            database error
          schema:
            $ref: '#/definitions/endpoints.UploadErrorResponse'
      summary: Upload a document
      tags:
      - documents
  /api/v1/documents/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Deletes a document and its associated file from S3 storage.

        ## Features
        - Deletes document metadata from DynamoDB
        - Removes the physical file from S3 storage
        - Returns 404 if document doesn't exist

        ## Use Cases
        - Remove unwanted documents
        - Clean up storage space
        - Comply with data deletion requests

        ## Error Codes
        - `NOT_FOUND`: Document with the specified ID does not exist
        - `PERSISTENCE_ERROR`: Failed to delete document from database
      parameters:
      - description: Document ID
        example: 123e4567-e89b-12d3-a456-426614174000
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document deleted successfully
          schema:
            $ref: '#/definitions/endpoints.DeleteResponse'
        "404":
          description: Document not found
          schema:
            $ref: '#/definitions/endpoints.DeleteErrorResponse'
        "500":
          description: Internal server error - database or storage error
          schema:
            $ref: '#/definitions/endpoints.DeleteErrorResponse'
      summary: Delete a document by ID
      tags:
      - documents
    get:
      consumes:
      - application/json
      description: |-
        Retrieves detailed information about a specific document by its ID.

        ## Features
        - Returns complete document metadata including URL for viewing/downloading
        - URL is pre-signed and ready to use in frontend viewers
        - Includes file information (size, type, hash, etc.)

        ## Use Cases
        - Display document details in UI
        - Preview documents in viewers (PDF, images, etc.)
        - Download documents
        - Verify document integrity using hash

        ## Error Codes
        - `NOT_FOUND`: Document with the specified ID does not exist
        - `PERSISTENCE_ERROR`: Failed to retrieve document from database
      parameters:
      - description: Document ID
        example: 123e4567-e89b-12d3-a456-426614174000
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document retrieved successfully
          schema:
            $ref: '#/definitions/endpoints.GetResponse'
        "404":
          description: Document not found
          schema:
            $ref: '#/definitions/endpoints.GetErrorResponse'
        "500":
          description: Internal server error - database error
          schema:
            $ref: '#/definitions/endpoints.GetErrorResponse'
      summary: Get document by ID
      tags:
      - documents
  /api/v1/documents/{id}/request-authentication:
    post:
      consumes:
      - application/json
      description: Requests authentication of a document by publishing an event for
        external authentication service. The document owner's citizen ID and filename
        are automatically included in the event.
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Authentication request accepted
          schema:
            $ref: '#/definitions/endpoints.RequestAuthenticationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/endpoints.RequestAuthenticationErrorResponse'
        "404":
          description: Document not found
          schema:
            $ref: '#/definitions/endpoints.RequestAuthenticationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/endpoints.RequestAuthenticationErrorResponse'
      summary: Request document authentication
      tags:
      - documents
  /api/v1/documents/transfer/{id_citizen}:
    get:
      consumes:
      - application/json
      description: Generates pre-signed URLs for all documents owned by a user for
        secure transfer to another operator
      parameters:
      - description: Citizen ID
        in: path
        name: id_citizen
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Documents prepared successfully
          schema:
            $ref: '#/definitions/endpoints.TransferResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/endpoints.TransferErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/endpoints.TransferErrorResponse'
      summary: Prepare documents for transfer
      tags:
      - documents
  /api/v1/documents/user/{id_citizen}:
    delete:
      consumes:
      - application/json
      description: |-
        Deletes all documents belonging to a specific user (identified by citizen ID) and their associated files from S3 storage.

        ## Features
        - Deletes all document metadata from DynamoDB for the specified user
        - Removes all physical files from S3 storage
        - Returns the count of deleted documents
        - Useful for account closure or data migration scenarios

        ## Use Cases
        - Account closure/deletion
        - Data migration to another system
        - Bulk cleanup operations
        - GDPR/privacy compliance (right to be forgotten)

        ## Error Codes
        - `VALIDATION_ERROR`: Invalid citizen ID
        - `PERSISTENCE_ERROR`: Failed to delete documents from database
      parameters:
      - description: Citizen ID
        example: 123456789
        in: path
        name: id_citizen
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: All documents deleted successfully
          schema:
            $ref: '#/definitions/endpoints.DeleteAllResponse'
        "400":
          description: Validation error - invalid citizen ID
          schema:
            $ref: '#/definitions/endpoints.DeleteAllErrorResponse'
        "500":
          description: Internal server error - database or storage error
          schema:
            $ref: '#/definitions/endpoints.DeleteAllErrorResponse'
      summary: Delete all documents for a user
      tags:
      - documents
  /healthz:
    get:
      description: |-
        Returns the health status of the service. Use this endpoint to verify that the API is running and responsive.
        This endpoint is useful for:
        - Load balancer health checks
        - Monitoring and alerting systems
        - Kubernetes liveness/readiness probes
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy and operational
          schema:
            $ref: '#/definitions/endpoints.HealthCheckResponse'
      summary: Health check endpoint
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
tags:
- description: Document upload and management operations
  name: documents
- description: Health check endpoints
  name: health
