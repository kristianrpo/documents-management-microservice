// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/documents": {
            "post": {
                "description": "Uploads a document to S3 storage and saves its metadata in DynamoDB.\n\n## Features\n- Automatic file deduplication based on SHA256 hash\n- If a file with the same hash exists for the same user, returns the existing document\n- Supports any file type\n- Automatically detects MIME type from file extension\n- Generates unique object keys using hash prefix for optimal S3 performance\n\n## Process\n1. Calculates SHA256 hash of the uploaded file\n2. Checks if document already exists (hash + email)\n3. If exists, returns existing document (no duplicate upload)\n4. If new, uploads to S3 and saves metadata to DynamoDB\n\n## Error Codes\n- ` + "`" + `VALIDATION_ERROR` + "`" + `: Invalid request format or missing required fields\n- ` + "`" + `FILE_READ_ERROR` + "`" + `: Failed to read the uploaded file\n- ` + "`" + `HASH_CALCULATE_ERROR` + "`" + `: Failed to calculate file hash\n- ` + "`" + `STORAGE_UPLOAD_ERROR` + "`" + `: Failed to upload file to S3\n- ` + "`" + `PERSISTENCE_ERROR` + "`" + `: Failed to save metadata to DynamoDB",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Upload a document",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload (supports any file type: PDF, images, documents, etc.)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com",
                        "description": "Owner's email address",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Document uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentUploadSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error - invalid email format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentUploadErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - file processing, storage upload, or database error",
                        "schema": {
                            "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentUploadErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Returns the health status of the service. Use this endpoint to verify that the API is running and responsive.\nThis endpoint is useful for:\n- Load balancer health checks\n- Monitoring and alerting systems\n- Kubernetes liveness/readiness probes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy and operational",
                        "schema": {
                            "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.HealthCheckResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentData": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string",
                    "example": "my-document.pdf"
                },
                "hash_sha256": {
                    "type": "string",
                    "example": "abc123def456789..."
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "mime_type": {
                    "type": "string",
                    "example": "application/pdf"
                },
                "owner_email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "size_bytes": {
                    "type": "integer",
                    "example": 102400
                },
                "url": {
                    "type": "string",
                    "example": "https://my-bucket.s3.amazonaws.com/ab/abc123def456.pdf"
                }
            }
        },
        "github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentUploadErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.ErrorDetail"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentUploadSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.DocumentData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_endpoints.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_kristianrpo_document-management-microservice_internal_adapters_http_dto_response_shared.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "invalid request format or validation failed"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Document upload and management operations",
            "name": "documents"
        },
        {
            "description": "Health check endpoints",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Document Management Microservice API",
	Description:      "Microservice for managing document uploads, storage, and metadata\n\nFeatures:\n- Upload documents to S3\n- Store metadata in DynamoDB\n- Automatic file deduplication based on SHA256 hash\n- Support for multiple file types\n- Health check endpoint",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
