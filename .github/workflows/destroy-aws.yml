name: Destroy AWS (EKS + Infra)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Escribe EXACTAMENTE: I UNDERSTAND (para confirmar el destroy)'
        required: true
        default: ''
      delete_state:
        description: 'Eliminar también los state files del microservicio? (true/false)'
        required: true
        default: 'false'

permissions:
  contents: read

env:
  TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
  TF_BACKEND_KEY: infra/terraform/aws/terraform.tfstate
  TF_BACKEND_REGION: ${{ secrets.AWS_REGION }}
  TF_BACKEND_DDB_TABLE: ${{ secrets.TF_BACKEND_DDB_TABLE }}

jobs:
  destroy:
    name: Destroy Microservice Resources (NOT Shared Infrastructure)
    runs-on: ubuntu-latest

    steps:
      # ========== 1. VERIFICACIÓN ==========
      - name: Guard rail confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "I UNDERSTAND" ]; then
            echo "Falta confirmación exacta: I UNDERSTAND"
            exit 1
          fi
          echo "✓ Destruyendo SOLO recursos del microservicio"
          echo "✓ La infraestructura compartida (VPC, EKS, RabbitMQ) NO será destruida"

      - uses: actions/checkout@v4

      # ========== 2. SETUP ==========
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Install tools
        run: |
          # kubectl
          KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          
          # jq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # ========== 3. CONECTAR AL CLUSTER ==========
      - name: Init Terraform infra
        working-directory: infra/terraform/aws
        run: |
          terraform init -input=false \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$TF_BACKEND_KEY" \
            -backend-config="region=$TF_BACKEND_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_DDB_TABLE" \
            -backend-config="encrypt=true"

      - name: Update kubeconfig
        id: kubeconfig
        run: |
          CLUSTER_NAME=$(terraform -chdir=infra/terraform/aws output -raw cluster_name)
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "${{ secrets.AWS_REGION }}"
          kubectl get nodes

      # ========== 4. ELIMINAR RECURSOS K8S ==========
      - name: Delete Kubernetes resources
        if: steps.kubeconfig.outcome == 'success'
        run: |
          echo "Eliminando recursos Kubernetes del microservicio..."
          
          # Aplicación
          kubectl delete -k k8s/overlays/prod/ --ignore-not-found --wait=true || true
          
          # Namespace
          kubectl delete namespace documents --ignore-not-found --wait=true || true
          
          # Monitoring resources
          kubectl delete configmap documents-service-dashboard -n monitoring --ignore-not-found || true
          kubectl delete prometheusrule documents-service-alerts -n monitoring --ignore-not-found || true
          kubectl delete servicemonitor documents-service -n monitoring --ignore-not-found || true

      # ========== 5. TERRAFORM DESTROY MONITORING ==========
      - name: Init Terraform k8s
        working-directory: k8s/terraform/aws
        run: |
          terraform init -input=false \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=k8s/terraform/aws/terraform.tfstate" \
            -backend-config="region=$TF_BACKEND_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_DDB_TABLE" \
            -backend-config="encrypt=true"

      - name: Read cluster outputs
        id: cluster_info
        run: |
          echo "CLUSTER_NAME=$(terraform -chdir=infra/terraform/aws output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENDPOINT=$(terraform -chdir=infra/terraform/aws output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "CLUSTER_CA=$(terraform -chdir=infra/terraform/aws output -raw cluster_ca_certificate)" >> $GITHUB_OUTPUT

      - name: Terraform Destroy monitoring stack
        working-directory: k8s/terraform/aws
        run: |
          terraform destroy -auto-approve -input=false \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "cluster_name=${{ steps.cluster_info.outputs.CLUSTER_NAME }}" \
            -var "cluster_endpoint=${{ steps.cluster_info.outputs.CLUSTER_ENDPOINT }}" \
            -var "cluster_ca_certificate=${{ steps.cluster_info.outputs.CLUSTER_CA }}"

      # ========== 6. TERRAFORM DESTROY INFRA ==========
      - name: Terraform Destroy microservice resources
        working-directory: infra/terraform/aws
        run: |
          terraform destroy -auto-approve -input=false

      # ========== 7. OPCIONAL: ELIMINAR STATE FILES ==========
      - name: Delete state files (optional)
        if: ${{ github.event.inputs.delete_state == 'true' }}
        run: |
          echo "Eliminando state files del microservicio..."
          aws s3api delete-object --bucket "$TF_BACKEND_BUCKET" --key "$TF_BACKEND_KEY" || true
          aws s3api delete-object --bucket "$TF_BACKEND_BUCKET" --key "k8s/terraform/aws/terraform.tfstate" || true
          echo "✓ State files eliminados (bucket compartido conservado)"