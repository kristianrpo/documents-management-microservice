name: Destroy AWS (EKS + Infra)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Escribe EXACTAMENTE: I UNDERSTAND (para confirmar el destroy)'
        required: true
        default: ''
      delete_backend:
        description: 'Eliminar también el S3 backend y la tabla DynamoDB de locks? (true/false)'
        required: true
        default: 'false'

permissions:
  contents: read

env:
  TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
  TF_BACKEND_KEY: infra/terraform/aws/terraform.tfstate
  TF_BACKEND_REGION: ${{ secrets.AWS_REGION }}
  TF_BACKEND_DDB_TABLE: ${{ secrets.TF_BACKEND_DDB_TABLE }}

jobs:
  destroy:
    name: Destroy Microservice Resources (NOT Shared Infrastructure)
    runs-on: ubuntu-latest

    steps:
      - name: Guard rail confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "I UNDERSTAND" ]; then
            echo "Falta confirmación exacta: I UNDERSTAND"
            exit 1
          fi
          echo "Confirmación OK - Destruyendo SOLO recursos del microservicio"
          echo "La infraestructura compartida (VPC, EKS, RabbitMQ) NO será destruida"

      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          set -e
          KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # ---------------------------
      # 1) Conectarnos al cluster (que existe en infraestructura compartida)
      # ---------------------------
      - name: Init Terraform (infra dir) para leer outputs
        working-directory: infra/terraform/aws
        run: |
          terraform init -input=false \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$TF_BACKEND_KEY" \
            -backend-config="region=$TF_BACKEND_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_DDB_TABLE" \
            -backend-config="encrypt=true"

      - name: Update kubeconfig (EKS desde shared infrastructure)
        id: kubeconfig
        continue-on-error: true
        run: |
          set -e
          CLUSTER_NAME=$(terraform -chdir=infra/terraform/aws output -raw cluster_name)
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "${{ secrets.AWS_REGION }}"
          kubectl version --client
          kubectl get nodes || true

      # ---------------------------
      # 2) Limpiar recursos K8s del microservicio
      # ---------------------------
      - name: Delete microservice-specific K8s resources
        if: steps.kubeconfig.outcome == 'success'
        continue-on-error: true
        run: |
          set -e
          echo "Eliminando recursos K8s del microservicio documents"
          # Eliminar aplicación
          kubectl delete -k k8s/ --ignore-not-found
          # ConfigMap del dashboard específico
          kubectl delete configmap documents-service-dashboard -n monitoring --ignore-not-found
          # PrometheusRule específico
          kubectl delete prometheusrule documents-service-alerts -n monitoring --ignore-not-found

      - name: Terraform Init (k8s)
        working-directory: k8s/terraform/aws
        run: |
          terraform init -input=false -upgrade \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=k8s/terraform/aws/terraform.tfstate" \
            -backend-config="region=$TF_BACKEND_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_DDB_TABLE" \
            -backend-config="encrypt=true"

      - name: Read infra outputs (para variables del provider k8s/helm)
        id: infra_outputs_destroy
        continue-on-error: true
        run: |
          echo "CLUSTER_NAME=$(terraform -chdir=infra/terraform/aws output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENDPOINT=$(terraform -chdir=infra/terraform/aws output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "CLUSTER_CA=$(terraform -chdir=infra/terraform/aws output -raw cluster_ca_certificate)" >> $GITHUB_OUTPUT

      - name: Terraform Destroy (k8s monitoring stack)
        if: steps.infra_outputs_destroy.outcome == 'success'
        working-directory: k8s/terraform/aws
        env:
          TF_LOG: INFO
        continue-on-error: true
        run: |
          set -e
          terraform destroy -auto-approve -input=false \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "cluster_name=${{ steps.infra_outputs_destroy.outputs.CLUSTER_NAME }}" \
            -var "cluster_endpoint=${{ steps.infra_outputs_destroy.outputs.CLUSTER_ENDPOINT }}" \
            -var "cluster_ca_certificate=${{ steps.infra_outputs_destroy.outputs.CLUSTER_CA }}"

      # ---------------------------
      # 3) Destroy microservice-specific AWS resources (S3, DynamoDB, IAM)
      # ---------------------------
      - name: Terraform Destroy (microservice resources)
        working-directory: infra/terraform/aws
        env:
          TF_LOG: INFO
        run: |
          set -e
          terraform destroy -auto-approve -input=false \
            -var "tf_backend_bucket=$TF_BACKEND_BUCKET"

      # ---------------------------
      # 4) (Opcional) Borrar SOLO el state del microservicio
      #    NO toca el bucket compartido ni la tabla DynamoDB de locks
      # ---------------------------
      - name: Delete microservice terraform state files
        if: ${{ github.event.inputs.delete_backend == 'true' }}
        run: |
          set -e
          echo "Eliminando SOLO los archivos de state del microservicio"
          echo "   Bucket: $TF_BACKEND_BUCKET (NO será eliminado)"
          echo "   Keys a eliminar:"
          echo "     - $TF_BACKEND_KEY"
          echo "     - k8s/terraform/aws/terraform.tfstate"

          # Eliminar state files del microservicio
          aws s3api delete-object --bucket "$TF_BACKEND_BUCKET" --key "$TF_BACKEND_KEY" || true
          aws s3api delete-object --bucket "$TF_BACKEND_BUCKET" --key "k8s/terraform/aws/terraform.tfstate" || true
          
          echo "State files del microservicio eliminados"
          echo "Backend compartido (S3 + DynamoDB) conservado para otros servicios"

      - name: Done
        run: |
          echo "Destroy del microservicio completado."
          echo ""
          echo "Recursos eliminados:"
          echo "  - S3 Bucket (documents)"
          echo "  - DynamoDB Table (documents)"
          echo "  - IAM Role/Policy (documents-irsa)"
          echo "  - Secrets Manager (application config)"
          echo "  - Monitoring stack (kube-prometheus)"
          echo ""
          echo "Recursos compartidos conservados:"
          echo "  - VPC"
          echo "  - EKS Cluster"
          echo "  - RabbitMQ"
          echo "  - AWS Load Balancer Controller"
          echo "  - External Secrets Operator"
          echo ""
          echo "Para destruir la infraestructura compartida, ejecuta el workflow de destroy en el repo infrastructure-shared"
