name: Documents Microservice CD

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/documents-microservice
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  sonar-tracking:
    name: SonarCloud Tracking (Main Branch)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: |
          golangci-lint run --output.checkstyle.path=golangci-lint-report.xml || true

      - name: Run Tests with Coverage
        run: |
          echo "Running unit tests..."
          go test ./internal/.../tests/... -v
          
          echo "Generating coverage report..."
          go test -coverpkg=./internal/... ./internal/.../tests -coverprofile=coverage.out -covermode=atomic
          
          echo "Coverage Summary:"
          go tool cover -func=coverage.out | tail -1

      - name: SonarCloud Scan (Main Branch)
        uses: SonarSource/sonarcloud-github-action@ffc3010689be73b8e5ae0c57ce35968afd7909e8 # v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.branch.name=main

  infra-apply:
    name: Provision AWS Infra (Terraform)
    runs-on: ubuntu-latest
    needs: sonar-tracking
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: infra/terraform/aws
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: infra/terraform/aws
        run: terraform apply -auto-approve -input=false

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: tfstate
          path: infra/terraform/aws/
          if-no-files-found: error

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build-and-push, infra-apply]
    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform state
        uses: actions/download-artifact@v4
        with:
          name: tfstate
          path: infra/terraform/aws

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $(terraform -chdir=infra/terraform/aws output -raw cluster_name) --region ${{ secrets.AWS_REGION }}

      - name: Prepare AWS Secrets for app
        env:
          TF_DIR: infra/terraform/aws
        run: |
          SECRET_NAME=$(terraform -chdir=$TF_DIR output -raw secretsmanager_secret_name)
          RABBIT_URL=$(terraform -chdir=$TF_DIR output -raw rabbitmq_amqp_url)
          S3_BUCKET=$(terraform -chdir=$TF_DIR output -raw s3_bucket)
          aws secretsmanager put-secret-value \
            --secret-id "$SECRET_NAME" \
            --secret-string "$(jq -n \
              --arg port "${{ secrets.APP_PORT }}" \
              --arg table "${{ secrets.DYNAMODB_TABLE_NAME }}" \
              --arg region "${{ secrets.AWS_REGION }}" \
              --arg bucket "$S3_BUCKET" \
              --arg rabbit "$RABBIT_URL" \
              --arg consumer_queue "${{ secrets.RABBITMQ_CONSUMER_QUEUE }}" \
              --arg auth_request_queue "${{ secrets.RABBITMQ_AUTH_REQUEST_QUEUE }}" \
              --arg auth_result_queue "${{ secrets.RABBITMQ_AUTH_RESULT_QUEUE }}" \
              '{
                APP_PORT: $port,
                DYNAMODB_TABLE: $table,
                DYNAMODB_ENDPOINT: "",
                AWS_REGION: $region,
                S3_BUCKET: $bucket,
                S3_ENDPOINT: "",
                S3_USE_PATH_STYLE: "false",
                S3_PUBLIC_BASE_URL: "",
                RABBITMQ_URL: $rabbit,
                RABBITMQ_CONSUMER_QUEUE: $consumer_queue,
                RABBITMQ_AUTH_REQUEST_QUEUE: $auth_request_queue,
                RABBITMQ_AUTH_RESULT_QUEUE: $auth_result_queue
              }')" || true

      - name: Apply K8s manifests (namespace, SA, externalsecrets)
        env:
          TF_DIR: infra/terraform/aws
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/service-account.yaml
          ROLE_ARN=$(terraform -chdir=$TF_DIR output -raw irsa_role_arn)
          kubectl -n documents annotate serviceaccount documents-sa eks.amazonaws.com/role-arn=$ROLE_ARN --overwrite
          SECRET_NAME=$(terraform -chdir=$TF_DIR output -raw secretsmanager_secret_name)
          sed -e "s#__AWS_SECRET_NAME__#${SECRET_NAME}#g" -e "s#__AWS_REGION__#${{ secrets.AWS_REGION }}#g" k8s/externalsecrets.yaml | kubectl apply -f -

      - name: Deploy application
        run: |
          kubectl apply -k k8s/
          kubectl -n documents rollout status deploy/documents-service --timeout=180s

      - name: Display Access Information
        run: |
          echo "=== Deployment Summary ==="
          echo ""
          echo "Application Ingress (ALB):"
          kubectl -n documents get ingress documents-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "Pending..."
          echo ""
          echo ""
          echo "Grafana LoadBalancer:"
          kubectl -n monitoring get svc kube-prometheus-stack-grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "Pending..."
          echo " (user: admin, pass: admin)"
          echo ""
          echo "Prometheus (internal):"
          echo "kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090"
          echo ""
